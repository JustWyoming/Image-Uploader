{"version":3,"sources":["firebase/firebase.js","components/ImageUpload.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","storage","ImageUpload","props","handleChange","e","target","files","image","setState","handleUpload","state","imageName","ref","name","put","on","snapshot","progress","Math","round","bytesTransferred","totalBytes","error","console","log","child","getDownloadURL","then","url","bind","className","value","this","max","for","onChange","id","type","onClick","src","alt","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iUAeAA,IAASC,cAZc,CAEnBC,OAAQC,0CACRC,WAAYD,yCACZE,YAAaF,gDACbG,UAAWH,yBACXI,cAAeJ,qCACfK,kBAAmBL,aACnBM,MAAON,4CAOX,IAAMO,EAAUV,IAASU,UC6CVC,E,YA3Db,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAWRC,aAAe,SAAAC,GACb,GAAIA,EAAEC,OAAOC,MAAM,GAAI,CACrB,IAAMC,EAAQH,EAAEC,OAAOC,MAAM,GAC7B,EAAKE,UAAS,iBAAO,CAACD,cAfP,EAkBnBE,aAAe,WAAO,IAAD,EAIb,EAAKC,MAFPH,EAFe,EAEfA,MAFe,EAGfI,UAEiBX,EAAQY,IAAR,iBAAsBL,EAAMM,OAAQC,IAAIP,GAChDQ,GAAG,iBACd,SAACC,GAEC,IAAMC,EAAWC,KAAKC,MAAOH,EAASI,iBAAmBJ,EAASK,WAAc,KAChF,EAAKb,SAAS,CAACS,gBAEjB,SAACK,GAECC,QAAQC,IAAIF,MAEhB,WAEItB,EAAQY,IAAI,UAAUa,MAAMlB,EAAMM,MAAMa,iBAAiBC,MAAK,SAAAC,GAC1DL,QAAQC,IAAII,GACZ,EAAKpB,SAAS,CAACoB,eApCvB,EAAKlB,MAAQ,CACXH,MAAO,KACPqB,IAAK,GACLX,SAAU,GAEZ,EAAKd,aAAe,EACjBA,aACA0B,KAFiB,gBAGlB,EAAKpB,aAAe,EAAKA,aAAaoB,KAAlB,gBAVL,E,sEA2CjB,OACE,yBAAKC,UAAU,eACb,8BAAUA,UAAU,WAAWC,MAAOC,KAAKtB,MAAMO,SAAUgB,IAAI,QAC/D,6BACA,2BAAOC,IAAI,cAAcJ,UAAU,qBAAqBK,SAAUH,KAAK7B,cAAvE,cAEE,2BAAOiC,GAAG,cAAcC,KAAK,UAE/B,4BAAQP,UAAU,gBAAgBQ,QAASN,KAAKvB,cAAhD,UACA,6BACA,yBAAK8B,IAAKP,KAAKtB,MAAMkB,KAAO,iCAAkCE,UAAU,cAAcU,IAAI,yB,GAtDxEC,aCuBXC,E,iLAnBX,OACA,yBAAKZ,UAAU,OACV,yBAAKA,UAAU,YAChB,+CACA,kBAAC,EAAD,OAGF,yBAAKA,UAAU,cACb,sCACA,0BAAMM,GAAG,QAAQN,UAAU,eAE7B,yBAAMA,UAAU,aAAhB,SAEE,0BAAMM,GAAG,OAAON,UAAU,mB,GAfhBW,aCOEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,MAAK,SAAA4B,GACjCA,EAAaC,kB","file":"static/js/main.0196c3f7.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/storage';\n\nconst firebaseConfig = {\n   \n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_APP_ID \n}\n\n//initialize firebase\nfirebase.initializeApp(firebaseConfig);\n\n//initialize storage\nconst storage = firebase.storage();\n\n//export all this shizz\n\nexport {\n  storage, firebase as default\n};","import React, {Component} from 'react';\nimport {storage} from '../firebase/firebase';\n\nclass ImageUpload extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { //initial state\n      image: null,\n      url: '',\n      progress: 0\n    }\n    this.handleChange = this\n      .handleChange\n      .bind(this);\n      this.handleUpload = this.handleUpload.bind(this);\n  }\n  handleChange = e => {\n    if (e.target.files[0]) {\n      const image = e.target.files[0];\n      this.setState(() => ({image}));\n    }\n  }\n  handleUpload = () => {\n      const {\n        image,\n        imageName\n      } = this.state;\n      const uploadTask = storage.ref(`images/${image.name}`).put(image);\n      uploadTask.on('state_changed', \n      (snapshot) => {\n        // progrss function ....\n        const progress = Math.round((snapshot.bytesTransferred / snapshot.totalBytes) * 100);\n        this.setState({progress});\n      }, \n      (error) => {\n           // error function ....\n        console.log(error);\n      }, \n    () => {\n        // complete function ....\n        storage.ref('images').child(image.name).getDownloadURL().then(url => {\n            console.log(url);\n            this.setState({url});\n        })\n    });\n  }\n  render() {\n    return (\n      <div className=\"upload-form\">\n        <progress className=\"progress\" value={this.state.progress} max=\"100\"/>\n        <br/>\n        <label for='file-upload' className='custom-file-upload' onChange={this.handleChange}>\n          Choose File \n          <input id=\"file-upload\" type=\"file\"/>\n        </label>\n        <button className=\"submit-button\" onClick={this.handleUpload}>Upload</button>\n        <br/>\n        <img src={this.state.url || 'http://via.placeholder.com/600'} className='placeholder' alt=\"Uploaded images\" />\n      </div>\n    )\n  }\n}\n\nexport default ImageUpload;","import React, { Component } from 'react';\n\nimport './App.css';\nimport ImageUpload from './components/ImageUpload';\n\nclass App extends Component {\n   render(){\n    return (\n    <div className=\"App\">\n         <div className=\"uploader\">\n        <h1>Image Uploader </h1>\n        <ImageUpload />\n      </div>\n\n      <div className='just-right'>\n        <span>JUST</span>\n        <span id=\"right\" className=\"right-bar\"></span>\n      </div>\n      <div  className='just-left'>\n        UPLOAD\n        <span id=\"left\" className=\"left-bar\"></span></div>    \n    </div>   \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}